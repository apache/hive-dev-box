#!/bin/bash -e

type=${1:-derby}


# FIXME enable hive.metastore.schema.verification

echo "@ initializing: $type"

DOCKER="sudo docker"
function isContainerRunning() {
    [ "`$DOCKER ps -q -f name=$1`" != "" ]
}

case $type in
    rebuild)
        n="`git status -s | wc -l `"
        if [ "$n" -ne 0 ];then
            git status -s
            echo ">> ok to purge and rebuild? "
            read
            if [ "$REPLY" != "y" ];then
                echo " ...exiting"
                exit 1
            fi
        fi
        /usr/local/hive-toolbox/scripts/xl_hive_reinit `git config --get extra.ideProjects`
        exit 0
    ;;
    x)
        if isContainerRunning artifactory;then

            echo ok
        else
            echo start
        fi
        exit 0
    ;;
    derby)
        D=/data/hive/metastore_db
        rm -rf $D
        conf del hive/hive-site javax.jdo.option.ConnectionDriverName
        conf set hive/hive-site javax.jdo.option.ConnectionURL "jdbc:derby:;databaseName=/data/hive/metastore_db;create=true"
        conf del hive/hive-site javax.jdo.option.ConnectionUserName
        conf del hive/hive-site javax.jdo.option.ConnectionPassword
	cp /active/hive/lib/derby-*.jar /apps/lib/
    ;;
    postgres)
        sudo -u postgres dropdb metastore
        sudo -u postgres createdb metastore -O hiveuser
        conf set hive/hive-site javax.jdo.option.ConnectionDriverName org.postgresql.Driver
        conf set hive/hive-site javax.jdo.option.ConnectionURL 'jdbc:postgresql://localhost/metastore'
        conf set hive/hive-site javax.jdo.option.ConnectionUserName hiveuser
        conf set hive/hive-site javax.jdo.option.ConnectionPassword mypassword
    ;;
    mysql)
        sudo mysql < <(echo 'drop database if exists metastore; create database metastore;')
        conf set hive/hive-site javax.jdo.option.ConnectionDriverName com.mysql.jdbc.Driver
        conf set hive/hive-site javax.jdo.option.ConnectionURL 'jdbc:mysql://localhost:3306/metastore'
        conf set hive/hive-site javax.jdo.option.ConnectionUserName hive
        conf set hive/hive-site javax.jdo.option.ConnectionPassword mypassword
    ;;
    oracle)
        # docker must be installed/set up
        docker kill ora11 || echo 'not killed; probably not running...'
    	sleep 1
    	docker run -p 1521:1521 -d --name ora11 --rm oracleinanutshell/oracle-xe-11g
	echo "docker exec -it ora11 /bin/bash -ic 'sqlplus -L \"system/oracle\"' "'$@' | sudo dd of=/bin/sqlplus_sys
    # FIXME it would be better to detect wether stdin is a file or not...
	echo "docker exec -i ora11 /bin/bash -ic 'sqlplus -S -L \"system/oracle\"' "'$@' | sudo dd of=/bin/sqlplus_sys0
	echo "docker exec -it ora11 /bin/bash -ic 'sqlplus -L \"hive/mypassword\"' "'$@' | sudo dd of=/bin/sqlplus
	sudo chmod +x /bin/sqlplus{,_sys*}

    while true;do
        if sqlplus_sys0 < <(echo -e 'QUIT;');then
            echo "ok"
            break
        else
            echo "waiting for oracle.."
        fi
        sleep 1
    done

	sqlplus_sys0 << EOF
	CREATE USER hive IDENTIFIED BY mypassword;
	GRANT SELECT_CATALOG_ROLE TO hive;
	GRANT CONNECT, RESOURCE TO hive;
	QUIT;
EOF
    conf set hive/hive-site javax.jdo.option.ConnectionDriverName oracle.jdbc.OracleDriver
    conf set hive/hive-site javax.jdo.option.ConnectionURL 'jdbc:oracle:thin:@//localhost/xe'
    conf set hive/hive-site javax.jdo.option.ConnectionUserName hive
    conf set hive/hive-site javax.jdo.option.ConnectionPassword mypassword

    sudo docker cp ora11:/u01/app/oracle/product/11.2.0/xe/jdbc/lib/ojdbc6.jar /apps/lib
	#
    ;;
    *)
        banner not impl
        exit 1
esac

schematool -verbose -dbType $type -initSchema
schematool -verbose -dbType hive -initSchema -metaDbType $type

banner ok
